// -----------------------------------------------------------------------------------
// Copyright (C) Riccardo De Agostini and Buildvana contributors. All rights reserved.
// Licensed under the MIT license.
// See LICENSE file in the project root for full license information.
//
// Part of this file may be third-party code, distributed under a compatible license.
// See THIRD-PARTY-NOTICES file in the project root for third-party copyright notices.
// -----------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

namespace Buildvana.Sdk.Tasks.Internal
{
    internal abstract partial class CodeGenerator : CodeBuilder
    {
        private static readonly IReadOnlyDictionary<string, Func<CodeGenerator>> Factories
            = new Dictionary<string, Func<CodeGenerator>>
            {
                { "C#", () => new CSharpCodeGenerator() },
                { "VB", () => new VisualBasicCodeGenerator() },
            };

        protected CodeGenerator()
        {
            LineComment("<auto-generated />");
        }

        protected abstract string LineCommentPrefix { get; }

        public static bool TryCreate(string language, [MaybeNullWhen(false)] out CodeGenerator result)
        {
            if (!Factories.TryGetValue(language, out var factory))
            {
                result = null;
                return false;
            }

            result = factory();
            return true;
        }

        protected abstract void QuotedText(string str);

        private void LineComment(string comment)
        {
            NewLine(LineCommentPrefix);
            Text(comment);
            NewLine();
        }
    }
}