<Project Sdk="Microsoft.NET.Sdk">

  <!-- Common properties -->

  <PropertyGroup>
    <TargetFrameworks>net46;net472;netcoreapp2.1;netcoreapp3.1;net5.0</TargetFrameworks>
    <Title>Buildvana SDK</Title>
    <Summary>An opinionated, best-practices-based, CI-friendly, VS-friendly, MSBuild-powered build system for .NET projects.</Summary>
    <Description>This assembly contains compiled tasks used by Buildvana SDK. Documentation for the SDK is available here: https://github.com/Buildvana/Buildvana.Sdk/blob/master/README.md</Description>
    <XmlDocs>false</XmlDocs> <!--Do not generate XML documentation -->
    <ExportJetBrainsAnnotations>false</ExportJetBrainsAnnotations> <!--Do not generate a .ExternalAnnotations.xml file -->
  </PropertyGroup>

  <!-- NuGet package configuration -->

  <PropertyGroup>
    <PackageType>MSBuildSdk</PackageType>
    <PackageTags>build msbuild sdk dotnet</PackageTags>
    <DevelopmentDependency>true</DevelopmentDependency>
    <Serviceable>true</Serviceable>
    <MinClientVersion>4.3</MinClientVersion> <!-- Minimum NuGet client version supporting SemVer 2.0 -->
    <NoWarn>$(NoWarn);NU5100</NoWarn> <!-- The assembly '...' is not inside the 'lib' folder and hence it won't be added as a reference. -->
    <NoWarn>$(NoWarn);NU5128</NoWarn> <!-- Some target frameworks [...] do not have exact matches [in the lib folder]. -->
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
  </PropertyGroup>

  <!-- Package contents (besides build output) -->

  <PropertyGroup>
    <EnableDefaultContentItems>false</EnableDefaultContentItems>
    <EnableDefaultNoneItems>false</EnableDefaultNoneItems>
  </PropertyGroup>

  <ItemGroup>
    <None Include="Modules\**\*" Exclude="*.cs" Pack="true" PackagePath="%(Identity)" />
    <None Include="Sdk\**\*" Pack="true" PackagePath="%(Identity)" />
  </ItemGroup>

  <!-- Additional package content - a workaround for project items not allowing duplicates, even with different Link metadata -->

  <ItemGroup>
    <None Include="Aliased\**\*" Pack="false" />
  </ItemGroup>

  <!-- __AdditionalPackageContent works the opposite way with respect to Content, None, and other similar items:
       you "Include" the _target_ path (always relative to the package "root") and set the Source metadata to the path
       of the source file. This lets you add the same file to a package multiple times, as the item identities
       will be different. -->
  <ItemGroup>
    <__AdditionalPackageContent Include="Sdk\Import.BeforeCommon.props.proj" Source="Aliased\ImportFiles.proj" />
    <__AdditionalPackageContent Include="Sdk\Import.Common.props.proj" Source="Aliased\ImportFiles.proj" />
    <__AdditionalPackageContent Include="Sdk\Import.AfterCommon.props.proj" Source="Aliased\ImportFiles.proj" />
    <__AdditionalPackageContent Include="Sdk\Import.BeforeCommon.targets.proj" Source="Aliased\ImportFiles.proj" />
    <__AdditionalPackageContent Include="Sdk\Import.Common.targets.proj" Source="Aliased\ImportFiles.proj" />
    <__AdditionalPackageContent Include="Sdk\Import.AfterCommon.targets.proj" Source="Aliased\ImportFiles.proj" />
  </ItemGroup>

  <!-- References -->

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Framework" />
    <PackageReference Include="Microsoft.Build.Tasks.Core" />
    <PackageReference Include="Microsoft.Build.Utilities.Core" />
    <PackageReference Include="Nullable" />
  </ItemGroup>

  <!-- SourceLink -->

  <PropertyGroup>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" />
  </ItemGroup>

  <!-- Make all package references private -->

  <ItemGroup>
    <PackageReference Update="@(PackageReference)" ExcludeAssets="Runtime" PrivateAssets="All" />
  </ItemGroup>

  <!-- Create an intermediate folder with additional package content. Folder layout must mimic package layout. -->

  <Target Name="__ComputeAdditionalPackageContentPaths">

    <!-- IntermediateOutputPath is unknown to us at evaluation time, because it is set in a Microsoft SDK .targets file.
         Therefore we can only use it in a task. -->
    <PropertyGroup>
      <__IntermediateAdditionalPackageContentDir>$(IntermediateOutputPath)AdditionalPackageContent\</__IntermediateAdditionalPackageContentDir>
    </PropertyGroup>

    <!-- Now is the right time to actually evaluate sources for additional content package.
         All targets that depend on this target are executed after Build. -->
    <ItemGroup>
      <__AdditionalPackageContentSourceProvisional Include="%(__AdditionalPackageContent.Source)" />
      <__AdditionalPackageContentSource Include="@(__AdditionalPackageContentSourceProvisional->Distinct())" />
      <__AdditionalPackageContentSourceProvisional Remove="@(__AdditionalPackageContentSourceProvisional)" /> <!-- Free up some memory -->
    </ItemGroup>

    <ItemGroup>
      <__AdditionalPackageContentDestination Include="$([System.IO.Path]::Combine('$(__IntermediateAdditionalPackageContentDir)', '%(__AdditionalPackageContent.Identity)'))" />
    </ItemGroup>

  </Target>

  <Target Name="__CopyAdditionalPackageContentToIntermediateDirectory"
          AfterTargets="Build"
          DependsOnTargets="__ComputeAdditionalPackageContentPaths"
          Inputs="@(__AdditionalPackageContentSource)"
          Outputs="@(__AdditionalPackageContentDestination)">

    <MakeDir Directories="$(__IntermediateAdditionalPackageContentDir)" />

    <Copy SourceFiles="%(__AdditionalPackageContent.Source)"
          DestinationFiles="$([System.IO.Path]::Combine('$(__IntermediateAdditionalPackageContentDir)', '%(__AdditionalPackageContent.Identity)'))" />

  </Target>

  <!-- Clean additional package content intermediate directory -->

  <Target Name="__CleanAdditionalPackageContentIntermediateDirectory"
          AfterTargets="BeforeClean"
          DependsOnTargets="__ComputeAdditionalPackageContentPaths">

    <RemoveDir Directories="$(__IntermediateAdditionalPackageContentDir)" />

  </Target>

  <!-- Include additional content in package -->

  <!-- We need to execute __IncludeAdditionalContentInPackage before GenerateNuspec.
       Declaring BeforeTargets="Pack" in our target is not sufficient, because Pack depends on GenerateNuspec,
       and dependency targets are executed before "before" targets.
       We cannot set PackDependsOn either, because NuGet.Build.Tasks.Pack.targets would later prepend GenerateNuspec to it.
       The only correct way is to add our target to BeforePack. -->
  <PropertyGroup>
    <BeforePack>$(BeforePack);__IncludeAdditionalContentInPackage</BeforePack>
  </PropertyGroup>

  <Target Name="__IncludeAdditionalContentInPackage" DependsOnTargets="__ComputeAdditionalPackageContentPaths">

    <ItemGroup>
      <BV_CopiedAdditionalPackageContent Include="$(__IntermediateAdditionalPackageContentDir)**\*" />
      <None Include="@(BV_CopiedAdditionalPackageContent)" Visible="false" Pack="true" PackagePath="%(RecursiveDir)%(Filename)%(Extension)" />
    </ItemGroup>

  </Target>

  <!-- Include published binaries under Sdk folder in package. -->

  <PropertyGroup>
    <BeforePack>$(BeforePack);__PublishDll</BeforePack>
  </PropertyGroup>
  <Target Name="__PublishDll">

    <PropertyGroup>
      <__DllPublishPath>$(MSBuildThisFileDirectory)obj\$(Configuration)\PublishedDll\</__DllPublishPath>
    </PropertyGroup>

    <ItemGroup>
      <__DllTargetFramework Include="$(TargetFrameworks)" />
    </ItemGroup>

    <!-- Publish this project for each target framework. -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="Publish" Properties="Configuration=$(Configuration);PublishDir=$(__DllPublishPath)%(__DllTargetFramework.Identity);PublishProtocol=FileSystem;TargetFramework=%(__DllTargetFramework.Identity);SelfContained=false" />

    <ItemGroup>
      <!-- Include published output as content, setting appropriate package paths. -->
      <Content Include="$(__DllPublishPath)%(__DllTargetFramework.Identity)\*" PackagePath="Sdk\%(__DllTargetFramework.Identity)\" Visible="false" />
      <!-- Don't include .deps.json files. -->
      <Content Remove="$(__DllPublishPath)%(__DllTargetFramework.Identity)\*.deps.json" />
      <!-- Don't include .pdb files in non-debug configurations (i.e. Release). -->
      <Content Remove="$(__DllPublishPath)%(__DllTargetFramework.Identity)\*.pdb" Condition="'$(Configuration)' != 'Debug'" />
    </ItemGroup>

  </Target>

</Project>