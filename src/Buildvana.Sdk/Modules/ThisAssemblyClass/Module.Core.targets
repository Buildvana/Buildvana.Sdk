<Project>

  <PropertyGroup>
    <BV_ThisAssemblyClassFile>$(IntermediateOutputPath)$(MSBuildProjectName).ThisAssembly.g$(DefaultLanguageSourceExtension)</BV_ThisAssemblyClassFile>
  </PropertyGroup>

  <PropertyGroup>
    <ThisAssemblyClassName Condition="'$(ThisAssemblyClassName)' == ''">ThisAssembly</ThisAssemblyClassName>
  </PropertyGroup>

  <!-- Coalesce EnableDefaultThisAssemblyConstants to a boolean value, defaulting to true. -->
  <PropertyGroup>
    <EnableDefaultThisAssemblyConstants Condition="'$(EnableDefaultThisAssemblyConstants)' == ''">true</EnableDefaultThisAssemblyConstants>
    <EnableDefaultThisAssemblyConstants Condition="'$(EnableDefaultThisAssemblyConstants)' != 'true'">false</EnableDefaultThisAssemblyConstants>
  </PropertyGroup>

  <!--
    This must run before every invocation of CoreCompile to ensure that all compiler runs
    see the generated assembly info. There is at least one scenario involving Xaml
    where CoreCompile is invoked without other potential hooks such as Compile or CoreBuild,
    etc., so we hook directly on to CoreCompile. Furthermore, we  must run *after*
    PrepareForBuild to ensure that the intermediate directory has been created.
  -->
  <Target Name="BV_GenerateThisAssemblyClass"
          BeforeTargets="CoreCompile"
          DependsOnTargets="PrepareForBuild;BV_DefineDefaultThisAssemblyConstants;BV_GenerateThisAssemblyClassCore" />

  <Target Name="BV_DefineDefaultThisAssemblyConstants"
          Condition="$(EnableDefaultThisAssemblyConstants)">

    <ItemGroup>
      <ThisAssemblyConstant Remove="Version" />
      <ThisAssemblyConstant Remove="FileVersion" />
      <ThisAssemblyConstant Remove="InformationalVersion" />
      <ThisAssemblyConstant Remove="Company" />
      <ThisAssemblyConstant Remove="Copyright" />
      <ThisAssemblyConstant Remove="Description" />
      <ThisAssemblyConstant Remove="Product" />
      <ThisAssemblyConstant Remove="Title" />
    </ItemGroup>

    <ItemGroup>
      <ThisAssemblyConstant Include="Version" Type="string" Value="$(AssemblyVersion)" />
      <ThisAssemblyConstant Include="FileVersion" Type="string" Value="$(FileVersion)" />
      <ThisAssemblyConstant Include="InformationalVersion" Type="string" Value="$(InformationalVersion)" />
      <ThisAssemblyConstant Include="Company" Type="string" Value="$(Company)" />
      <ThisAssemblyConstant Include="Copyright" Type="string" Value="$(Copyright)" />
      <ThisAssemblyConstant Include="Description" Type="string" Value="$(Description)" />
      <ThisAssemblyConstant Include="Product" Type="string" Value="$(Product)" />
      <ThisAssemblyConstant Include="Title" Type="string" Value="$(AssemblyTitle)" />
    </ItemGroup>

  </Target>

  <!--
    To allow version changes to be respected on incremental builds (e.g. through CLI parameters),
    create a hash of all assembly attributes so that the cache file will change with the calculated
    assembly attribute values and msbuild will then execute BV_GenerateThisAssemblyClassCore
    to generate a new file.
  -->
  <Target Name="BV_CreateGeneratedThisAssemblyClassInputsCacheFile">

    <PropertyGroup>
      <BV_GeneratedThisAssemblyClassInputsCacheFile>$(IntermediateOutputPath)$(MSBuildProjectName).ThisAssemblyClassInputs.cache</BV_GeneratedThisAssemblyClassInputsCacheFile>
    </PropertyGroup>

    <Hash ItemsToHash="@(ThisAssemblyConstant->'%(Identity)%(Type)%(Value)')">
      <Output TaskParameter="HashResult" PropertyName="BV_ThisAssemblyConstantsHash" />
    </Hash>

    <WriteLinesToFile Lines="$(BV_ThisAssemblyConstantsHash)"
                      File="$(BV_GeneratedThisAssemblyClassInputsCacheFile)"
                      Overwrite="True"
                      WriteOnlyWhenDifferent="True" />

    <ItemGroup>
      <FileWrites Include="$(BV_GeneratedThisAssemblyClassInputsCacheFile)" />
    </ItemGroup>

  </Target>

  <Target Name="BV_GenerateThisAssemblyClassCore"
          DependsOnTargets="BV_CreateGeneratedThisAssemblyClassInputsCacheFile"
          Inputs="$(BV_GeneratedThisAssemblyClassInputsCacheFile)"
          Outputs="$(BV_ThisAssemblyClassFile)"
          Condition="@(ThisAssemblyConstant->Count()) > 0">

    <WriteThisAssemblyClass Language="$(Language)"
                            OutputPath="$(BV_ThisAssemblyClassFile)"
                            ClassName="$(ThisAssemblyClassName)"
                            Namespace="$(ThisAssemblyClassNamespace)"
                            Constants="@(ThisAssemblyConstant)" />

		<ItemGroup>
			<Compile Remove="$(BV_ThisAssemblyClassFile)" />
			<Compile Include="$(BV_ThisAssemblyClassFile)" Visible="False" />
      <FileWrites Include="$(BV_ThisAssemblyClassFile)" />
		</ItemGroup>

	</Target>

</Project>