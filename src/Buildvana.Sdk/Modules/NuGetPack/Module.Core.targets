<Project>

  <!-- Put packages in artifacts folder. -->
  <PropertyGroup>
    <PackageOutputPath>$(ArtifactsDirectory)$(Configuration)\</PackageOutputPath>
  </PropertyGroup>

  <!-- Make Owners default to Authors. -->
  <PropertyGroup>
    <Owners Condition="'$(Owners)' == ''">$(Authors)</Owners>
  </PropertyGroup>

  <!-- ===================================================================================== -->

  <!-- Coalesce LicenseFileInPackage to a boolean value.
       Default is true, unless LicensePackageExpression is defined. -->
  <PropertyGroup>
    <LicenseFileInPackage Condition="'$(PackageLicenseExpression)' != ''">false</LicenseFileInPackage>
    <LicenseFileInPackage Condition="'$(LicenseFileInPackage)' == ''">true</LicenseFileInPackage>
    <LicenseFileInPackage Condition="'$(LicenseFileInPackage)' != 'true'">false</LicenseFileInPackage>
  </PropertyGroup>

  <!-- Include a license file in package:
       - if LicenseFileInPackage is false, just don't;
       - if PackageLicensePath is specified, use it;
       - otherwise, if PackageLicenseFile is specified, look for it in project directory and going up.
         If a file is found, set PackageLicensePath to its full path;
       - otherwise, look for a default license file. If a file is found,
         set PackageLicensePath to its full path and PackageLicenseFile to its filename. -->
  <Choose>
    <When Condition="!$(LicenseFileInPackage)">
      <PropertyGroup>
        <PackageLicenseFile />
        <PackageLicensePath />
      </PropertyGroup>
    </When>
    <When Condition="'$(PackageLicensePath)' != ''">
      <PropertyGroup>
        <PackageLicenseFile>$([System.IO.Path]::GetFileName('$(PackageLicensePath)'))</PackageLicenseFile>
      </PropertyGroup>
      <ItemGroup>
        <EvaluationError
          Condition="!Exists('$(PackageLicensePath)')"
          Include="BVE1500"
          Text="Specified license file '$(PackageLicensePath)' does not exist." />
      </ItemGroup>
    </When>
    <When Condition="'$(PackageLicenseFile)' != ''">
      <PropertyGroup>
        <PackageLicensePath>$([MSBuild]::GetPathOfFileAbove('$(PackageLicenseFile)', '$(MSBuildProjectDirectory)'))</PackageLicensePath>
      </PropertyGroup>
      <ItemGroup>
        <EvaluationError
          Condition="'$(PackageLicensePath)' == ''"
          Include="BVE1501"
          Text="Specified license file '$(PackageLicenseFile)' was not found." />
      </ItemGroup>
    </When>
    <Otherwise>
      <!-- Default license file can be one of (in order of discovery):
             - LICENSE
             - LICENSE.txt
             - LICENSE.md
             - License
             - License.txt
             - License.md
             - license
             - license.txt
             - license.md

           Files found outside repository are ignored. -->
      <PropertyGroup>
        <PackageLicensePath>$([MSBuild]::GetPathOfFileAbove('LICENSE', '$(MSBuildProjectDirectory)'))</PackageLicensePath>
        <PackageLicensePath Condition="'$(PackageLicensePath)' != '' And !$(PackageLicensePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageLicensePath)' == ''">
        <PackageLicensePath>$([MSBuild]::GetPathOfFileAbove('LICENSE.txt', '$(MSBuildProjectDirectory)'))</PackageLicensePath>
        <PackageLicensePath Condition="'$(PackageLicensePath)' != '' And !$(PackageLicensePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageLicensePath)' == ''">
        <PackageLicensePath>$([MSBuild]::GetPathOfFileAbove('LICENSE.md', '$(MSBuildProjectDirectory)'))</PackageLicensePath>
        <PackageLicensePath Condition="'$(PackageLicensePath)' != '' And !$(PackageLicensePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageLicensePath)' == ''">
        <PackageLicensePath>$([MSBuild]::GetPathOfFileAbove('License', '$(MSBuildProjectDirectory)'))</PackageLicensePath>
        <PackageLicensePath Condition="'$(PackageLicensePath)' != '' And !$(PackageLicensePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageLicensePath)' == ''">
        <PackageLicensePath>$([MSBuild]::GetPathOfFileAbove('License.txt', '$(MSBuildProjectDirectory)'))</PackageLicensePath>
        <PackageLicensePath Condition="'$(PackageLicensePath)' != '' And !$(PackageLicensePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageLicensePath)' == ''">
        <PackageLicensePath>$([MSBuild]::GetPathOfFileAbove('License.md', '$(MSBuildProjectDirectory)'))</PackageLicensePath>
        <PackageLicensePath Condition="'$(PackageLicensePath)' != '' And !$(PackageLicensePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageLicensePath)' == ''">
        <PackageLicensePath>$([MSBuild]::GetPathOfFileAbove('license', '$(MSBuildProjectDirectory)'))</PackageLicensePath>
        <PackageLicensePath Condition="'$(PackageLicensePath)' != '' And !$(PackageLicensePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageLicensePath)' == ''">
        <PackageLicensePath>$([MSBuild]::GetPathOfFileAbove('license.txt', '$(MSBuildProjectDirectory)'))</PackageLicensePath>
        <PackageLicensePath Condition="'$(PackageLicensePath)' != '' And !$(PackageLicensePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageLicensePath)' == ''">
        <PackageLicensePath>$([MSBuild]::GetPathOfFileAbove('license.md', '$(MSBuildProjectDirectory)'))</PackageLicensePath>
        <PackageLicensePath Condition="'$(PackageLicensePath)' != '' And !$(PackageLicensePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <!-- Use found filename to set PackageLicenseFile. -->
      <PropertyGroup Condition="'$(PackageLicensePath)' != ''">
        <PackageLicenseFile>$([System.IO.Path]::GetFileName('$(PackageLicensePath)'))</PackageLicenseFile>
      </PropertyGroup>
      <!-- Error if not found. -->
      <ItemGroup>
        <EvaluationError
          Condition="'$(PackageLicensePath)' == ''"
          Include="BVE1502"
          Text="No license file found." />
      </ItemGroup>
    </Otherwise>
  </Choose>

  <!-- Add license file to project items so the Pack target can find it.. -->
  <ItemGroup Condition="'$(PackageLicensePath)' != '' And '$(PackageLicenseFile)' != ''">
    <EvaluationMessage Include="Using '$(PackageLicensePath)' as license file in $(MSBuildProjectName) package." />
    <Content Remove="$(PackageLicensePath)" />
    <Content Include="$(PackageLicensePath)" Link="$(PackageLicenseFile)" Pack="true" PackagePath="" Visible="false" />
  </ItemGroup>

  <!-- Coalesce PackageRequireLicenseAcceptance to a boolean value. Default is false. -->
  <PropertyGroup>
    <PackageRequireLicenseAcceptance Condition="'$(LicensePackageExpression)' == '' And !$(LicenseFileInPackage)">false</PackageRequireLicenseAcceptance>
    <PackageRequireLicenseAcceptance Condition="'$(PackageRequireLicenseAcceptance)' != 'true'">false</PackageRequireLicenseAcceptance>
  </PropertyGroup>

  <!-- ===================================================================================== -->

  <!-- Coalesce ThirdPartyNoticeInPackage to a boolean value. Default is true. -->
  <PropertyGroup>
    <ThirdPartyNoticeInPackage Condition="'$(ThirdPartyNoticeInPackage)' == ''">true</ThirdPartyNoticeInPackage>
    <ThirdPartyNoticeInPackage Condition="'$(ThirdPartyNoticeInPackage)' != 'true'">false</ThirdPartyNoticeInPackage>
  </PropertyGroup>

  <!-- Include a third-party notice in package:
       - if ThirdPartyNoticeInPackage is false, just don't;
       - if PackageThirdPartyNoticePath is specified, use it;
       - otherwise, if PackageThirdPartyNoticeFile is specified, look for it in project directory and going up.
         If a file is found, set PackageThirdPartyNoticePath to its full path;
       - otherwise, look for a default third-party notice file. If a file is found,
         set PackageThirdPartyNoticePath to its full path and PackageThirdPartyNoticeFile to its filename. -->
  <Choose>
    <When Condition="!$(ThirdPartyNoticeInPackage)">
      <PropertyGroup>
        <PackageThirdPartyNoticeFile />
        <PackageThirdPartyNoticePath />
      </PropertyGroup>
    </When>
    <When Condition="'$(PackageThirdPartyNoticePath)' != ''">
      <PropertyGroup>
        <PackageThirdPartyNoticeFile>$([System.IO.Path]::GetFileName('$(PackageThirdPartyNoticePath)'))</PackageThirdPartyNoticeFile>
      </PropertyGroup>
      <ItemGroup>
        <EvaluationError
          Condition="!Exists('$(PackageThirdPartyNoticePath)')"
          Include="BVE1503"
          Text="Specified third-party notice file '$(PackageThirdPartyNoticePath)' does not exist." />
      </ItemGroup>
    </When>
    <When Condition="'$(PackageThirdPartyNoticeFile)' != ''">
      <PropertyGroup>
        <PackageThirdPartyNoticePath>$([MSBuild]::GetPathOfFileAbove('$(PackageThirdPartyNoticeFile)', '$(MSBuildProjectDirectory)'))</PackageThirdPartyNoticePath>
      </PropertyGroup>
      <ItemGroup>
        <EvaluationError
          Condition="'$(PackageThirdPartyNoticePath)' == ''"
          Include="BVE1504"
          Text="Specified third-party notice file '$(PackageThirdPartyNoticeFile)' was not found." />
      </ItemGroup>
    </When>
    <Otherwise>
      <!-- Default third-party notice file can be one of (in order of discovery):
             - THIRD-PARTY-NOTICES
             - THIRD-PARTY-NOTICES.txt
             - THIRD-PARTY-NOTICES.md
             - third-party-notices
             - third-party-notices.txt
             - third-party-notices.md
             - ThirdPartyNotices
             - ThirdPartyNotices.txt
             - ThirdPartyNotices.md

           Files found outside repository are ignored. -->
      <PropertyGroup>
        <PackageThirdPartyNoticePath>$([MSBuild]::GetPathOfFileAbove('THIRD-PARTY-NOTICES', '$(MSBuildProjectDirectory)'))</PackageThirdPartyNoticePath>
        <PackageThirdPartyNoticePath Condition="'$(PackageThirdPartyNoticePath)' != '' And !$(PackageThirdPartyNoticePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageThirdPartyNoticePath)' == ''">
        <PackageThirdPartyNoticePath>$([MSBuild]::GetPathOfFileAbove('THIRD-PARTY-NOTICES.txt', '$(MSBuildProjectDirectory)'))</PackageThirdPartyNoticePath>
        <PackageThirdPartyNoticePath Condition="'$(PackageThirdPartyNoticePath)' != '' And !$(PackageThirdPartyNoticePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageThirdPartyNoticePath)' == ''">
        <PackageThirdPartyNoticePath>$([MSBuild]::GetPathOfFileAbove('THIRD-PARTY-NOTICES.md', '$(MSBuildProjectDirectory)'))</PackageThirdPartyNoticePath>
        <PackageThirdPartyNoticePath Condition="'$(PackageThirdPartyNoticePath)' != '' And !$(PackageThirdPartyNoticePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageThirdPartyNoticePath)' == ''">
        <PackageThirdPartyNoticePath>$([MSBuild]::GetPathOfFileAbove('third-party-notices', '$(MSBuildProjectDirectory)'))</PackageThirdPartyNoticePath>
        <PackageThirdPartyNoticePath Condition="'$(PackageThirdPartyNoticePath)' != '' And !$(PackageThirdPartyNoticePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageThirdPartyNoticePath)' == ''">
        <PackageThirdPartyNoticePath>$([MSBuild]::GetPathOfFileAbove('third-party-notices.txt', '$(MSBuildProjectDirectory)'))</PackageThirdPartyNoticePath>
        <PackageThirdPartyNoticePath Condition="'$(PackageThirdPartyNoticePath)' != '' And !$(PackageThirdPartyNoticePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageThirdPartyNoticePath)' == ''">
        <PackageThirdPartyNoticePath>$([MSBuild]::GetPathOfFileAbove('third-party-notices.md', '$(MSBuildProjectDirectory)'))</PackageThirdPartyNoticePath>
        <PackageThirdPartyNoticePath Condition="'$(PackageThirdPartyNoticePath)' != '' And !$(PackageThirdPartyNoticePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageThirdPartyNoticePath)' == ''">
        <PackageThirdPartyNoticePath>$([MSBuild]::GetPathOfFileAbove('ThirdPartyNotices', '$(MSBuildProjectDirectory)'))</PackageThirdPartyNoticePath>
        <PackageThirdPartyNoticePath Condition="'$(PackageThirdPartyNoticePath)' != '' And !$(PackageThirdPartyNoticePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageThirdPartyNoticePath)' == ''">
        <PackageThirdPartyNoticePath>$([MSBuild]::GetPathOfFileAbove('ThirdPartyNotices.txt', '$(MSBuildProjectDirectory)'))</PackageThirdPartyNoticePath>
        <PackageThirdPartyNoticePath Condition="'$(PackageThirdPartyNoticePath)' != '' And !$(PackageThirdPartyNoticePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageThirdPartyNoticePath)' == ''">
        <PackageThirdPartyNoticePath>$([MSBuild]::GetPathOfFileAbove('ThirdPartyNotices.md', '$(MSBuildProjectDirectory)'))</PackageThirdPartyNoticePath>
        <PackageThirdPartyNoticePath Condition="'$(PackageThirdPartyNoticePath)' != '' And !$(PackageThirdPartyNoticePath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <!-- Use found filename to set PackageThirdPartyNoticeFile. -->
      <PropertyGroup Condition="'$(PackageThirdPartyNoticePath)' != ''">
        <PackageThirdPartyNoticeFile>$([System.IO.Path]::GetFileName('$(PackageThirdPartyNoticePath)'))</PackageThirdPartyNoticeFile>
      </PropertyGroup>
      <!-- Error if not found. -->
      <ItemGroup>
        <EvaluationError
          Condition="'$(PackageThirdPartyNoticePath)' == ''"
          Include="BVE1505"
          Text="No third-party notice file found." />
      </ItemGroup>
    </Otherwise>
  </Choose>

  <!-- Add third-party notice file to project items so the Pack target can find it.. -->
  <ItemGroup Condition="'$(PackageThirdPartyNoticePath)' != '' And '$(PackageThirdPartyNoticeFile)' != ''">
    <EvaluationMessage Include="Using '$(PackageThirdPartyNoticePath)' as third-party copyright notices file in $(MSBuildProjectName) package." />
    <Content Remove="$(PackageThirdPartyNoticePath)" />
    <Content Include="$(PackageThirdPartyNoticePath)" Link="$(PackageThirdPartyNoticeFile)" Pack="true" PackagePath="" Visible="false" />
  </ItemGroup>

  <!-- ===================================================================================== -->

  <!-- Coalesce IconInPackage to a boolean value. Default is true. -->
  <PropertyGroup>
    <IconInPackage Condition="'$(IconInPackage)' == ''">true</IconInPackage>
    <IconInPackage Condition="'$(IconInPackage)' != 'true'">false</IconInPackage>
  </PropertyGroup>

  <!-- Use a package icon:
       - if IconInPackage is false, just don't;
       - if PackageIconPath is specified, use it;
       - otherwise, if PackageIcon is specified, look for it in project directory and going up.
         If a file is found, set PackageIconPath to its full path;
       - otherwise, look for a default icon file. If a file is found,
        set PackageIconPath to its full path and PackageIcon to its filename. -->
  <Choose>
    <When Condition="!$(IconInPackage)">
      <PropertyGroup>
        <PackageIcon />
        <PackageIconPath />
      </PropertyGroup>
    </When>
    <When Condition="'$(PackageIconPath)' != ''">
      <PropertyGroup>
        <PackageIcon>$([System.IO.Path]::GetFileName('$(PackageIconPath)'))</PackageIcon>
      </PropertyGroup>
      <ItemGroup>
        <EvaluationError
          Condition="!Exists('$(PackageIconPath)')"
          Include="BVE1506"
          Text="Specified package icon file '$(PackageIconPath)' does not exist." />
      </ItemGroup>
    </When>
    <When Condition="'$(PackageIcon)' != ''">
      <PropertyGroup>
        <PackageIconPath>$([MSBuild]::GetPathOfFileAbove('$(PackageIcon)', '$(MSBuildProjectDirectory)'))</PackageIconPath>
      </PropertyGroup>
      <ItemGroup>
        <EvaluationError
          Condition="'$(PackageIconPath)' == ''"
          Include="BVE1507"
          Text="Specified package icon file '$(PackageIcon)' was not found." />
      </ItemGroup>
    </When>
    <Otherwise>
      <!-- Default icon file can be one of (in order of discovery):
             - <project_name>.package.png
             - <project_name>.package.png in a "graphics" subfolder
             - <project_name>.package.png in a "branding" subfolder
             - <product_name>.package.png
             - <product_name>.package.png in a "graphics" subfolder
             - <product_name>.package.png in a "branding" subfolder
             - PackageIcon.png
             - PackageIcon.png in a "graphics" subfolder
             - PackageIcon.png in a "branding" subfolder
             - icon.png
             - icon.png in a "graphics" subfolder
             - icon.png in a "branding" subfolder

           Files found outside repository are ignored.

           To look for a file in a specific subfolder, since GetPathOfFileAbove only accepts filenames,
           use GetDirectoryNameOfFileAbove and combine it with the searched-for subpath later if found. -->
      <PropertyGroup>
        <PackageIconPath>$([MSBuild]::GetPathOfFileAbove('$(MSBuildProjectName).package.png', '$(MSBuildProjectDirectory)'))</PackageIconPath>
        <PackageIconPath Condition="'$(PackageIconPath)' != '' And !$(PackageIconPath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageIconPath)' == ''">
        <BV_PackageIconSubPath>graphics/$(MSBuildProjectName).package.png</BV_PackageIconSubPath>
        <BV_PackageIconDirectory>$([MSBuild]::GetDirectoryNameOfFileAbove('$(MSBuildProjectDirectory)','$(BV_PackageIconSubPath)'))</BV_PackageIconDirectory>
        <PackageIconPath Condition="'$(BV_PackageIconDirectory)' != ''">$([System.IO.Path]::Combine('$(BV_PackageIconDirectory)', '$(BV_PackageIconSubPath)'))</PackageIconPath>
        <PackageIconPath Condition="'$(PackageIconPath)' != '' And !$(PackageIconPath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageIconPath)' == ''">
        <BV_PackageIconSubPath>branding/$(MSBuildProjectName).package.png</BV_PackageIconSubPath>
        <BV_PackageIconDirectory>$([MSBuild]::GetDirectoryNameOfFileAbove('$(MSBuildProjectDirectory)','$(BV_PackageIconSubPath)'))</BV_PackageIconDirectory>
        <PackageIconPath Condition="'$(BV_PackageIconDirectory)' != ''">$([System.IO.Path]::Combine('$(BV_PackageIconDirectory)', '$(BV_PackageIconSubPath)'))</PackageIconPath>
        <PackageIconPath Condition="'$(PackageIconPath)' != '' And !$(PackageIconPath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageIconPath)' == ''">
        <PackageIconPath>$([MSBuild]::GetPathOfFileAbove('$(Product).package.png', '$(MSBuildProjectDirectory)'))</PackageIconPath>
        <PackageIconPath Condition="'$(PackageIconPath)' != '' And !$(PackageIconPath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageIconPath)' == ''">
        <BV_PackageIconSubPath>graphics/$(Product).package.png</BV_PackageIconSubPath>
        <BV_PackageIconDirectory>$([MSBuild]::GetDirectoryNameOfFileAbove('$(MSBuildProjectDirectory)','$(BV_PackageIconSubPath)'))</BV_PackageIconDirectory>
        <PackageIconPath Condition="'$(BV_PackageIconDirectory)' != ''">$([System.IO.Path]::Combine('$(BV_PackageIconDirectory)', '$(BV_PackageIconSubPath)'))</PackageIconPath>
        <PackageIconPath Condition="'$(PackageIconPath)' != '' And !$(PackageIconPath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageIconPath)' == ''">
        <BV_PackageIconSubPath>branding/$(Product).package.png</BV_PackageIconSubPath>
        <BV_PackageIconDirectory>$([MSBuild]::GetDirectoryNameOfFileAbove('$(MSBuildProjectDirectory)','$(BV_PackageIconSubPath)'))</BV_PackageIconDirectory>
        <PackageIconPath Condition="'$(BV_PackageIconDirectory)' != ''">$([System.IO.Path]::Combine('$(BV_PackageIconDirectory)', '$(BV_PackageIconSubPath)'))</PackageIconPath>
        <PackageIconPath Condition="'$(PackageIconPath)' != '' And !$(PackageIconPath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageIconPath)' == ''">
        <PackageIconPath>$([MSBuild]::GetPathOfFileAbove('PackageIcon.png', '$(MSBuildProjectDirectory)'))</PackageIconPath>
        <PackageIconPath Condition="'$(PackageIconPath)' != '' And !$(PackageIconPath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageIconPath)' == ''">
        <BV_PackageIconSubPath>graphics/PackageIcon.png</BV_PackageIconSubPath>
        <BV_PackageIconDirectory>$([MSBuild]::GetDirectoryNameOfFileAbove('$(MSBuildProjectDirectory)','$(BV_PackageIconSubPath)'))</BV_PackageIconDirectory>
        <PackageIconPath Condition="'$(BV_PackageIconDirectory)' != ''">$([System.IO.Path]::Combine('$(BV_PackageIconDirectory)', '$(BV_PackageIconSubPath)'))</PackageIconPath>
        <PackageIconPath Condition="'$(PackageIconPath)' != '' And !$(PackageIconPath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageIconPath)' == ''">
        <BV_PackageIconSubPath>branding/PackageIcon.png</BV_PackageIconSubPath>
        <BV_PackageIconDirectory>$([MSBuild]::GetDirectoryNameOfFileAbove('$(MSBuildProjectDirectory)','$(BV_PackageIconSubPath)'))</BV_PackageIconDirectory>
        <PackageIconPath Condition="'$(BV_PackageIconDirectory)' != ''">$([System.IO.Path]::Combine('$(BV_PackageIconDirectory)', '$(BV_PackageIconSubPath)'))</PackageIconPath>
        <PackageIconPath Condition="'$(PackageIconPath)' != '' And !$(PackageIconPath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageIconPath)' == ''">
        <PackageIconPath>$([MSBuild]::GetPathOfFileAbove('icon.png', '$(MSBuildProjectDirectory)'))</PackageIconPath>
        <PackageIconPath Condition="'$(PackageIconPath)' != '' And !$(PackageIconPath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageIconPath)' == ''">
        <BV_PackageIconSubPath>graphics/icon.png</BV_PackageIconSubPath>
        <BV_PackageIconDirectory>$([MSBuild]::GetDirectoryNameOfFileAbove('$(MSBuildProjectDirectory)','$(BV_PackageIconSubPath)'))</BV_PackageIconDirectory>
        <PackageIconPath Condition="'$(BV_PackageIconDirectory)' != ''">$([System.IO.Path]::Combine('$(BV_PackageIconDirectory)', '$(BV_PackageIconSubPath)'))</PackageIconPath>
        <PackageIconPath Condition="'$(PackageIconPath)' != '' And !$(PackageIconPath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <PropertyGroup Condition="'$(PackageIconPath)' == ''">
        <BV_PackageIconSubPath>branding/icon.png</BV_PackageIconSubPath>
        <BV_PackageIconDirectory>$([MSBuild]::GetDirectoryNameOfFileAbove('$(MSBuildProjectDirectory)','$(BV_PackageIconSubPath)'))</BV_PackageIconDirectory>
        <PackageIconPath Condition="'$(BV_PackageIconDirectory)' != ''">$([System.IO.Path]::Combine('$(BV_PackageIconDirectory)', '$(BV_PackageIconSubPath)'))</PackageIconPath>
        <PackageIconPath Condition="'$(PackageIconPath)' != '' And !$(PackageIconPath.StartsWith('$(HomeDirectory)'))" />
      </PropertyGroup>
      <!-- Use found filename to set PackageIcon. -->
      <PropertyGroup Condition="'$(PackageIconPath)' != ''">
        <PackageIcon>$([System.IO.Path]::GetFileName('$(PackageIconPath)'))</PackageIcon>
      </PropertyGroup>
      <!-- Error if not found. -->
      <ItemGroup>
        <EvaluationError
          Condition="'$(PackageIconPath)' == ''"
          Include="BVE1508"
          Text="No package icon file found." />
      </ItemGroup>
    </Otherwise>
  </Choose>

  <!-- Add icon file to project items so the Pack target can find it. -->
  <ItemGroup Condition="'$(PackageIconPath)' != '' And '$(PackageIcon)' != ''">
    <EvaluationMessage Include="Using '$(PackageIconPath)' as package icon in $(MSBuildProjectName) package." />
    <Content Remove="$(PackageIconPath)" />
    <Content Include="$(PackageIconPath)" Link="$(PackageIcon)" Pack="true" PackagePath="" Visible="false" />
  </ItemGroup>

  <!-- ===================================================================================== -->

  <!-- Automatically use a <project_name>.nuspec file if present alongside the project file. -->
  <PropertyGroup Condition="'$(NuspecFile)' == ''">
    <NuspecFile Condition="Exists('$(MSBuildProjectDirectory)\$(MSBuildProjectName).nuspec')">$(MSBuildProjectName).nuspec</NuspecFile>
  </PropertyGroup>

  <!-- Set NuspecProperties if there is a .nuspec file to use. -->
  <PropertyGroup Condition="'$(NuspecFile)' != ''">
    <GenerateNuspecDependsOn>$(GenerateNuspecDependsOn);BV_SetNuspecProperties</GenerateNuspecDependsOn>
  </PropertyGroup>

  <Target Name="BV_SetNuspecProperties">

    <PropertyGroup>
      <!-- Reset 'SourceRevisionId' to default value when not set -->
      <SourceRevisionId Condition="'$(SourceRevisionId)' == ''">0</SourceRevisionId>
    </PropertyGroup>

    <PropertyGroup>
      <NuspecProperties>
        id=$(PackageId);
        title=$(Title);
        version=$(PackageVersion);
        summary=$(Summary);
        description=$(Description);
        owners=$(Owners.Replace(';',','));
        authors=$(Authors.Replace(';',','));
        copyright=$(Copyright);
        tags=$(PackageTags.Replace(';',','));
        repositoryType=$(RepositoryType);
        repositoryUrl=$(RepositoryUrl);
        projectUrl=$(PackageProjectUrl);
        licenseFile=$(PackageLicenseFile);
        icon=$([System.IO.Path]::GetFileName('$(PackageIcon)'));
        requireLicenseAcceptance=$(PackageRequireLicenseAcceptance);
        packageType=$(PackageType);
        releaseNotes=$(PackageReleaseNotes);
        sourceRevisionId=$(SourceRevisionId);
        developmentDependency=$(DevelopmentDependency);
        serviceable=$(Serviceable)
      </NuspecProperties>
    </PropertyGroup>

  </Target>

</Project>